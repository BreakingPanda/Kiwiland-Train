/*
Deployment script for Train

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar BackupPath "D:\Projects\Train\SQLBackup\"
:setvar IncludeImport "1"
:setvar ScriptPath "D:\Projects\Train\Train.Data.SQL\bin\Debug\"
:setvar DatabaseName "Train"
:setvar DefaultFilePrefix "Train"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Latin1_General_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
------------------------- begin post deployment steps -------------------------------

IF EXISTS (SELECT 1 FROM sys.databases WHERE [name]='Train')
BEGIN
	-- Should I make a backup here?  MAYBE :-)
	-- TODO: Maybe improve this piece to create differential backup
    DECLARE @var AS VARCHAR (MAX);
    SELECT @var = CONVERT(VARCHAR, GETUTCDATE(), 23) + '-' + REPLACE(CONVERT(VARCHAR, GETUTCDATE(), 8), ':', '-')
	SET @var = 'BACKUP DATABASE [Train] TO DISK = ''' + '$(BackupPath)' + '\Train-' + @var + '.BAK''';
	EXEC (@var);
END


---------------------- end post deployment steps ------------------------------------
GO

GO
PRINT N'Creating [audit]...';


GO
CREATE SCHEMA [audit]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [deployment]...';


GO
CREATE SCHEMA [deployment]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [audit].[Audit]...';


GO
CREATE TABLE [audit].[Audit] (
    [AuditId]   INT           IDENTITY (1, 1) NOT NULL,
    [AuditDate] DATETIME2 (2) NOT NULL,
    [TableName] VARCHAR (255) NOT NULL,
    [Before]    XML           NULL,
    [After]     XML           NULL,
    CONSTRAINT [PK_Audit] PRIMARY KEY CLUSTERED ([AuditId] ASC)
);


GO
PRINT N'Creating [audit].[Audit].[IX_Audit_AuditDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Audit_AuditDate]
    ON [audit].[Audit]([AuditDate] ASC);


GO
PRINT N'Creating [deployment].[ScriptRunLog]...';


GO
CREATE TABLE [deployment].[ScriptRunLog] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [RunDate]     DATETIME2 (7) NOT NULL,
    [Script]      VARCHAR (MAX) NOT NULL,
    [MachineName] VARCHAR (200) NULL,
    [Edition]     VARCHAR (200) NULL,
    [SqlVersion]  VARCHAR (200) NULL,
    CONSTRAINT [PK_ScriptRunLog] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[City]...';


GO
CREATE TABLE [dbo].[City] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [Name]         VARCHAR (25)  NOT NULL,
    [CreatedDate]  DATETIME2 (7) NOT NULL,
    [ModifiedDate] DATETIME2 (7) NULL,
    CONSTRAINT [PK_City] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Road]...';


GO
CREATE TABLE [dbo].[Road] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [From]         INT           NOT NULL,
    [To]           INT           NOT NULL,
    [Distance]     INT           NOT NULL,
    [CreatedDate]  DATETIME2 (7) NOT NULL,
    [ModifiedDate] DATETIME2 (7) NULL
);


GO
PRINT N'Creating [dbo].[Road].[IX_Road_Composite]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Road_Composite]
    ON [dbo].[Road]([From] ASC, [To] ASC);


GO
PRINT N'Creating [audit].[DF_Audit_AuditDate]...';


GO
ALTER TABLE [audit].[Audit]
    ADD CONSTRAINT [DF_Audit_AuditDate] DEFAULT GETUTCDATE() FOR [AuditDate];


GO
PRINT N'Creating unnamed constraint on [deployment].[ScriptRunLog]...';


GO
ALTER TABLE [deployment].[ScriptRunLog]
    ADD DEFAULT (GETUTCDATE()) FOR [RunDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[City]...';


GO
ALTER TABLE [dbo].[City]
    ADD DEFAULT (GETUTCDATE()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[Road]...';


GO
ALTER TABLE [dbo].[Road]
    ADD DEFAULT 0 FOR [Distance];


GO
PRINT N'Creating unnamed constraint on [dbo].[Road]...';


GO
ALTER TABLE [dbo].[Road]
    ADD DEFAULT (GETUTCDATE()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[Road]...';


GO
ALTER TABLE [dbo].[Road]
    ADD FOREIGN KEY ([From]) REFERENCES [dbo].[City] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Road]...';


GO
ALTER TABLE [dbo].[Road]
    ADD FOREIGN KEY ([To]) REFERENCES [dbo].[City] ([Id]);


GO
PRINT N'Creating [dbo].[GetCity]...';


GO
create function [dbo].[GetCity] 
(
	@city	varchar(100)
)
returns int
begin
	declare @id int;
	
	select @id = Id from dbo.City where [Name] = @city; 

	return @id	
end
GO
PRINT N'Creating [deployment].[Import_Data]...';


GO
create procedure [deployment].[Import_Data]
as
begin
	INSERT INTO dbo.City ([Name])
	VALUES 
	('Brisbane'),
	('Sydney'),
	('Melbourne'),
	('Perth'),
	('Canberra'),
	('Cairns'),
	('Adelaide'),
	('Hobart'),
	('Coffs Hourbor'),
	('Gold Coast'),
	('Alice Spring')

	declare @brisbane int = dbo.GetCity('Brisbane')
	declare @sydney int = dbo.GetCity('Sydney')
	declare @melbourne int = dbo.GetCity('Melbourne')
	declare @perth int = dbo.GetCity('Perth')
	declare @canberra int = dbo.GetCity('Canberra')
	declare @cairns int = dbo.GetCity('Cairns')
	declare @adelaide int = dbo.GetCity('Adelaide')
	declare @hobart int = dbo.GetCity('Hobart')
	declare @coffs_harbour int = dbo.GetCity('Coffs Hourbor')
	declare @gold_coast int = dbo.GetCity('Gold Coast')
	declare @alice_spring int = dbo.GetCity('Alice Spring')

	INSERT INTO dbo.Road ([From],[To],[Distance])
	VALUES 
	(@sydney,@melbourne,877),		
	(@melbourne,@sydney,877),
	(@sydney,@canberra,286),		
	(@canberra,@sydney,286),
	(@sydney,@coffs_harbour,526),	
	(@coffs_harbour,@sydney,526),
	(@brisbane,@sydney,915),		
	(@sydney,@brisbane,915),
	(@brisbane,@gold_coast,59),		
	(@gold_coast,@brisbane,59),
	(@brisbane,@adelaide,2022),		
	(@adelaide,@brisbane,2022),		
	(@melbourne,@adelaide,726),		
	(@adelaide,@melbourne,726),		
	(@canberra,@melbourne,661),		
	(@melbourne,@canberra,661),		
	(@hobart,@melbourne,696),		
	(@melbourne,@hobart,696),
	(@cairns,@brisbane,1684),		
	(@brisbane,@cairns,1684),
	(@brisbane,@perth,4309),		
	(@perth,@brisbane,4309),
	(@sydney,@perth,3934),			
	(@perth,@sydney,3934),
	(@adelaide,@perth,2696),		
	(@perth,@adelaide,2696),
	(@brisbane,@coffs_harbour,390),
	(@coffs_harbour,@brisbane,390),
	(@coffs_harbour,@gold_coast,317),
	(@gold_coast,@coffs_harbour,317),
	(@alice_spring,@brisbane,2529),
	(@brisbane,@alice_spring,2529),
	(@alice_spring,@adelaide,1535),
	(@adelaide,@alice_spring,1535),
	(@alice_spring,@sydney,2773),
	(@sydney,@alice_spring,2773)
end
GO
PRINT N'Creating [dbo].[AddCity]...';


GO
create procedure [dbo].[AddCity] 
(
	@city	varchar(100)
)
as
begin
	if not exists (select 1 from dbo.City where [Name] = @city)
		insert into dbo.City ([Name]) VALUES (@city)
end
GO
PRINT N'Creating [dbo].[AddRoad]...';


GO
create procedure [dbo].[AddRoad]
(
	@from		varchar(MAX),
	@to			varchar(MAX),
	@distance	int
)
as
begin
	
	exec dbo.AddCity @from
	declare @from_id int = dbo.GetCity (@from)

	exec dbo.AddCity @to
	declare @to_id int  = dbo.GetCity(@to)
	
	insert into dbo.Road ([From], [To], [Distance])
	values (@from_id, @to_id, @distance)
end
GO
------------------------- begin post deployment steps -------------------------------

if '$(IncludeImport)' = 1 
begin
	truncate table dbo.[Road]
	delete from dbo.[City]

	exec deployment.Import_Data
end

--exec deployment.CreateAuditTriggers

DECLARE @script_content VARCHAR(MAX);
SELECT @script_content = BulkColumn 
FROM OPENROWSET(BULK'$(ScriptPath)Train.publish.sql',SINGLE_CLOB) x;

INSERT INTO deployment.ScriptRunLog ([Script],[MachineName],[Edition],[SqlVersion]) 
VALUES 
(
	@script_content,
	CONVERT(VARCHAR, SERVERPROPERTY('MachineName')),
	CONVERT(VARCHAR, SERVERPROPERTY('Edition')),
	CONVERT(VARCHAR, SERVERPROPERTY('ProductVersion'))
)

---------------------- end post deployment steps ------------------------------------

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
